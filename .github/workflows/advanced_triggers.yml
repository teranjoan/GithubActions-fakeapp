name: Advanced Triggers Examples

# === ADVANCED PUSH TRIGGERS ===
on:
  push:
    # Complex branch patterns
    branches:
      - main
      - master
      - develop
      - 'release/**'     # release/v1.0, release/hotfix/critical
      - 'hotfix/*'       # hotfix/bug-123
      - 'prd-*'          # prd-feature, prd-hotfix
      - '!feature/draft-*' # Exclude draft feature branches
    
    # Complex tag patterns  
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+' # Semantic versions: v1.2.3
      - 'prd-*'                 # Production tags
      - 'release-*'             # Release tags
      - '!*-alpha'              # Exclude alpha versions
    
    # Path-based triggers
    paths:
      - 'src/**'
      - 'api/**'
      - 'package*.json'
      - 'Dockerfile'
      - '.github/workflows/**'

  # === ADVANCED PULL REQUEST TRIGGERS ===
  pull_request:
    types:
      - opened
      - synchronize      # New commits pushed
      - reopened
      - ready_for_review # Draft -> Ready
      - review_requested # Someone requested review
      - labeled          # Label added
      - unlabeled        # Label removed
    
    branches:
      - main
      - develop
      - 'release/**'

  # === PULL REQUEST TARGET TRIGGERS ===
  pull_request_target:
    # Similar to pull_request but runs in context of target branch
    # Useful for security-sensitive operations on PRs from forks
    types: [opened, synchronize]
    branches: [main]

  # === COMPREHENSIVE MANUAL TRIGGERS ===
  workflow_dispatch:
    inputs:
      # Choice input
      environment:
        description: 'Deployment environment'
        required: true
        type: choice
        default: 'dev'
        options:
          - dev
          - staging
          - uat
          - prod
      
      # String input
      version:
        description: 'Version to deploy (e.g., v1.2.3, latest, commit-sha)'
        required: false
        type: string
        default: 'latest'
      
      # Boolean input
      skip_tests:
        description: 'Skip test execution'
        required: false
        type: boolean
        default: false
      
      # Multi-choice simulation with string
      services:
        description: 'Services to deploy (comma-separated: api,web,worker)'
        required: false
        type: string
        default: 'api,web'
      
      # Number input
      replicas:
        description: 'Number of replicas'
        required: false
        type: number
        default: 3

  # === SCHEDULED TRIGGERS (CRON) ===
  schedule:
    # Every 15 minutes
    - cron: '*/15 * * * *'
    
    # Business hours (9 AM to 5 PM, Mon-Fri) UTC
    - cron: '0 9-17 * * 1-5'
    
    # Daily at 2:30 AM UTC
    - cron: '30 2 * * *'
    
    # Weekly on Sunday at midnight UTC
    - cron: '0 0 * * 0'
    
    # Monthly on 1st day at 3 AM UTC
    - cron: '0 3 1 * *'
    
    # Quarterly (every 3 months on 1st day)
    - cron: '0 6 1 */3 *'

  # === REPOSITORY EVENT TRIGGERS ===
  release:
    types:
      - published       # Release is published
      - unpublished     # Release is unpublished
      - created         # Release is created
      - edited          # Release is edited
      - deleted         # Release is deleted
      - prereleased     # Pre-release is created
      - released        # Pre-release becomes release

  issues:
    types:
      - opened          # Issue created
      - edited          # Issue edited
      - deleted         # Issue deleted
      - transferred     # Issue transferred
      - pinned          # Issue pinned
      - unpinned        # Issue unpinned
      - closed          # Issue closed
      - reopened        # Issue reopened
      - assigned        # Issue assigned
      - unassigned      # Issue unassigned
      - labeled         # Label added
      - unlabeled       # Label removed
      - locked          # Issue locked
      - unlocked        # Issue unlocked
      - milestoned      # Milestone added
      - demilestoned    # Milestone removed

  # === COLLABORATION TRIGGERS ===
  issue_comment:
    types: [created, edited, deleted]

  pull_request_review:
    types:
      - submitted       # Review submitted
      - edited          # Review edited
      - dismissed       # Review dismissed

  pull_request_review_comment:
    types: [created, edited, deleted]

  # === BRANCH/TAG TRIGGERS ===
  create:              # Branch or tag created
  delete:              # Branch or tag deleted
  
  # === REPOSITORY TRIGGERS ===
  fork:                # Repository forked
  watch:               # Repository starred
  star:                # Repository starred (GitHub Enterprise)
  
  # === SECURITY TRIGGERS ===
  security_advisory:
    types: [published, updated]

  # === WORKFLOW TRIGGERS ===
  workflow_run:
    workflows: ["CI"]   # Trigger after CI workflow completes
    types:
      - completed       # Workflow completed
      - requested       # Workflow requested

jobs:
  # Demonstrate trigger context
  trigger_context:
    runs-on: ubuntu-latest
    steps:
      - name: Show complete trigger context
        run: |
          echo "üîç === COMPLETE TRIGGER CONTEXT ==="
          echo "Event: ${{ github.event_name }}"
          echo "Action: ${{ github.event.action }}"
          echo "Repository: ${{ github.repository }}"
          echo "Owner: ${{ github.repository_owner }}"
          echo "Actor: ${{ github.actor }}"
          echo "Triggering Actor: ${{ github.triggering_actor }}"
          echo ""
          echo "üìç Reference Information:"
          echo "Ref: ${{ github.ref }}"
          echo "Ref Name: ${{ github.ref_name }}"
          echo "Ref Type: ${{ github.ref_type }}"
          echo "Base Ref: ${{ github.base_ref }}"
          echo "Head Ref: ${{ github.head_ref }}"
          echo ""
          echo "üîó Commit Information:"
          echo "SHA: ${{ github.sha }}"
          echo "Before SHA: ${{ github.event.before }}"
          echo "After SHA: ${{ github.event.after }}"
          echo ""
          echo "üèÉ Workflow Information:"
          echo "Workflow: ${{ github.workflow }}"
          echo "Job: ${{ github.job }}"
          echo "Run ID: ${{ github.run_id }}"
          echo "Run Number: ${{ github.run_number }}"
          echo "Run Attempt: ${{ github.run_attempt }}"
          echo ""
          echo "üåç Environment:"
          echo "Server URL: ${{ github.server_url }}"
          echo "API URL: ${{ github.api_url }}"
          echo "GraphQL URL: ${{ github.graphql_url }}"
          echo "=============================="

  # Handle specific branch patterns
  production_deployment:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' && 
      (github.ref == 'refs/heads/prd' || 
       github.ref == 'refs/heads/master' || 
       github.ref == 'refs/heads/main' ||
       startsWith(github.ref, 'refs/heads/prd-'))
    steps:
      - name: Production deployment
        run: |
          echo "üöÄ PRODUCTION DEPLOYMENT TRIGGERED"
          echo "Branch: ${{ github.ref_name }}"
          
          case "${{ github.ref_name }}" in
            "prd"|"master"|"main")
              echo "üì¶ Main production deployment"
              ;;
            prd-*)
              echo "üîß Feature production deployment"
              echo "Feature: ${GITHUB_REF_NAME#prd-}"
              ;;
          esac

  # Handle tag-based releases
  tag_release:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' && 
      github.ref_type == 'tag' &&
      startsWith(github.ref_name, 'prd-')
    steps:
      - name: Tag-based release
        run: |
          echo "üè∑Ô∏è TAG RELEASE TRIGGERED"
          echo "Tag: ${{ github.ref_name }}"
          
          # Extract version from tag
          TAG_NAME="${{ github.ref_name }}"
          VERSION=${TAG_NAME#prd-}
          
          echo "Version: $VERSION"
          echo "Deploying production release $VERSION"

  # Handle manual inputs
  manual_deployment:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Process manual inputs
        run: |
          echo "üë§ MANUAL DEPLOYMENT"
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Version: ${{ github.event.inputs.version }}"
          echo "Skip Tests: ${{ github.event.inputs.skip_tests }}"
          echo "Services: ${{ github.event.inputs.services }}"
          echo "Replicas: ${{ github.event.inputs.replicas }}"
          
          # Process services list
          IFS=',' read -ra SERVICES <<< "${{ github.event.inputs.services }}"
          for service in "${SERVICES[@]}"; do
            echo "üîß Deploying service: $service"
          done

  # Handle PR events
  pr_automation:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: PR automation
        run: |
          echo "üîÄ PULL REQUEST AUTOMATION"
          echo "Action: ${{ github.event.action }}"
          echo "PR #: ${{ github.event.number }}"
          echo "Title: ${{ github.event.pull_request.title }}"
          echo "Source: ${{ github.event.pull_request.head.ref }}"
          echo "Target: ${{ github.event.pull_request.base.ref }}"
          echo "Draft: ${{ github.event.pull_request.draft }}"
          echo "Mergeable: ${{ github.event.pull_request.mergeable }}"
          
          # Check for special labels or keywords
          if [[ "${{ github.event.pull_request.title }}" == *"[URGENT]"* ]]; then
            echo "üö® Urgent PR detected - fast-track review"
          fi

  # Scheduled maintenance
  scheduled_maintenance:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Scheduled maintenance
        run: |
          echo "‚è∞ SCHEDULED MAINTENANCE"
          echo "Time: $(date)"
          
          # Different actions based on schedule
          HOUR=$(date +%H)
          DAY=$(date +%u)  # 1=Monday, 7=Sunday
          
          if [[ $HOUR -eq 2 ]]; then
            echo "üåô Daily maintenance at 2 AM"
          elif [[ $DAY -eq 7 && $HOUR -eq 0 ]]; then
            echo "üìÖ Weekly maintenance on Sunday"
          else
            echo "üîÑ Regular scheduled check"
          fi